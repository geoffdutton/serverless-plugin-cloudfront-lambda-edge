##################################################
## This is an example of deploying a Lambda@Edge
## to an existing distribution and s3 bucket
##
## I have an existing s3 bucket called dev.wreckommendations.com
## where 'dev' would be the stage, so it'd be deployed like:
## sls deploy --stage dev --distribution-id [CloudFront ID]
##################################################
service: exisiting-dist

custom:
   # Note: Lambda@Edge can only be deployed in us-east-1
   defaultRegion: us-east-1
   defaultEnvironmentGroup: dev
   region: ${opt:region, self:custom.defaultRegion}
   # use a unique stage and/or service name since s3 buckets need to be globally unique
   stage: ${opt:stage, env:USER}
   distributionID: ${opt:distribution-id, env:AWS_CF_DIST_ID}

plugins:
   - serverless-plugin-existing-cloudfront-lambda-edge

package:
   exclude:
      - 'node_modules/**'
      - 'logs/**'

provider:
   name: aws
   runtime: nodejs12.x
   region: ${self:custom.region}
   stage: ${self:custom.stage}
   # Fun fact! You have to version functions because Lambda@Edge requires an explicit version rather than $LATEST
   # versionFunctions: false

functions:
   setCustomHeader:
      name: '${self:custom.stage}-${self:service}-origin-response'
      handler: handler.handler
      memorySize: 128
      timeout: 1
      lambdaAtEdge:
         distributionID: ${self:custom.distributionID}
         eventType: 'origin-response'

   setCustomCookie:
      name: '${self:custom.stage}-${self:service}-viewer-response'
      handler: handler.cookieSetter
      memorySize: 128
      timeout: 1
      lambdaAtEdge:
         distributionID: ${self:custom.distributionID}
         eventType: 'viewer-response'

   setOriginUri:
      name: '${self:custom.stage}-${self:service}-origin-request'
      handler: handler.rewriteOrigin
      memorySize: 128
      timeout: 4
      lambdaAtEdge:
         distributionID: ${self:custom.distributionID}
         eventType: 'origin-request'
